import { Box, Flex, Text } from "@chakra-ui/react";
import { ResponsiveLine } from "@nivo/line";

const testTheme = {
  background: "#333333",
  textColor: "#f2f2f2",
  fontSize: 12,
  axis: {
    domain: {
      line: {
        stroke: "#f2f2f2",
        strokeWidth: 1,
      },
    },
    ticks: {
      line: {
        stroke: "#f2f2f2",
        strokeWidth: 1,
      },
    },
  },
  grid: {
    line: {
      stroke: "#f2f2f2",
      strokeWidth: 1,
    },
  },
};

const CustomPoint = (props) => {
  const { x, y, size, color, borderColor, borderWidth } = props;
  return (
    <g transform={`translate(${x}, ${y})`} style={{ pointerEvents: "none" }}>
      <circle
        x={size * -0.5}
        y={size * -0.5}
        r={size / 2}
        fill={color}
        stroke={borderColor}
        strokeWidth={borderWidth}
      />
      <g
        transform={`translate(${size * -0.5}, ${size * -0.5})`}
        width={size}
        height={size}
      >
        <path
          cx={size * 0.5}
          cy={size * 0.5}
          transform={`scale(${size / 36})`}
          fillRule="evenodd"
          clipRule="evenodd"
          d="M18.3545 6C18.7309 6 19.0919 6.15804 19.3581 6.43934C19.6242 6.72064 19.7738 7.10218 19.7738 7.5V9C19.7738 9.39782 19.6242 9.77936 19.3581 10.0607C19.0919 10.342 18.7309 10.5 18.3545 10.5C17.978 10.5 17.617 10.342 17.3509 10.0607C17.0847 9.77936 16.9351 9.39782 16.9351 9V7.5C16.9351 7.10218 17.0847 6.72064 17.3509 6.43934C17.617 6.15804 17.978 6 18.3545 6ZM24.0317 18C24.0317 19.5913 23.4335 21.1174 22.3689 22.2426C21.3042 23.3679 19.8601 24 18.3545 24C16.8488 24 15.4047 23.3679 14.34 22.2426C13.2754 21.1174 12.6772 19.5913 12.6772 18C12.6772 16.4087 13.2754 14.8826 14.34 13.7574C15.4047 12.6321 16.8488 12 18.3545 12C19.8601 12 21.3042 12.6321 22.3689 13.7574C23.4335 14.8826 24.0317 16.4087 24.0317 18ZM23.3731 25.425L24.3766 26.4855C24.6443 26.7587 25.0028 26.9099 25.3749 26.9065C25.747 26.9031 26.103 26.7453 26.3662 26.4672C26.6293 26.1891 26.7786 25.8129 26.7818 25.4196C26.7851 25.0263 26.642 24.6474 26.3835 24.3645L25.38 23.304C25.1123 23.0308 24.7538 22.8796 24.3817 22.883C24.0095 22.8864 23.6536 23.0442 23.3904 23.3223C23.1273 23.6004 22.978 23.9766 22.9748 24.3699C22.9715 24.7632 23.1146 25.1421 23.3731 25.425ZM26.382 9.5145C26.6481 9.79579 26.7976 10.1773 26.7976 10.575C26.7976 10.9727 26.6481 11.3542 26.382 11.6355L25.38 12.696C25.2491 12.8393 25.0925 12.9535 24.9193 13.0322C24.7462 13.1108 24.5599 13.1521 24.3715 13.1539C24.183 13.1556 23.9961 13.1177 23.8217 13.0422C23.6473 12.9668 23.4888 12.8554 23.3555 12.7146C23.2223 12.5738 23.1169 12.4063 23.0455 12.2219C22.9741 12.0376 22.9382 11.8401 22.9399 11.6409C22.9415 11.4417 22.9807 11.2449 23.055 11.0619C23.1294 10.8789 23.2376 10.7134 23.3731 10.575L24.3766 9.5145C24.6427 9.23329 25.0037 9.07532 25.38 9.07532C25.7564 9.07532 26.1173 9.23329 26.3835 9.5145H26.382ZM28.2896 19.5C28.666 19.5 29.027 19.342 29.2932 19.0607C29.5594 18.7794 29.7089 18.3978 29.7089 18C29.7089 17.6022 29.5594 17.2206 29.2932 16.9393C29.027 16.658 28.666 16.5 28.2896 16.5H26.8703C26.4939 16.5 26.1329 16.658 25.8667 16.9393C25.6005 17.2206 25.451 17.6022 25.451 18C25.451 18.3978 25.6005 18.7794 25.8667 19.0607C26.1329 19.342 26.4939 19.5 26.8703 19.5H28.2896ZM18.3545 25.5C18.7309 25.5 19.0919 25.658 19.3581 25.9393C19.6242 26.2206 19.7738 26.6022 19.7738 27V28.5C19.7738 28.8978 19.6242 29.2794 19.3581 29.5607C19.0919 29.842 18.7309 30 18.3545 30C17.978 30 17.617 29.842 17.3509 29.5607C17.0847 29.2794 16.9351 28.8978 16.9351 28.5V27C16.9351 26.6022 17.0847 26.2206 17.3509 25.9393C17.617 25.658 17.978 25.5 18.3545 25.5ZM11.3289 12.696C11.4607 12.8354 11.6171 12.9459 11.7893 13.0214C11.9615 13.0969 12.1461 13.1357 12.3325 13.1358C12.519 13.1359 12.7036 13.0971 12.8758 13.0218C13.0481 12.9465 13.2046 12.836 13.3365 12.6967C13.4684 12.5575 13.573 12.3921 13.6444 12.2101C13.7158 12.0281 13.7526 11.8331 13.7526 11.636C13.7527 11.439 13.7161 11.2439 13.6448 11.0618C13.5735 10.8798 13.469 10.7144 13.3372 10.575L12.3323 9.5145C12.0647 9.24126 11.7061 9.09007 11.334 9.09349C10.9619 9.09691 10.6059 9.25466 10.3427 9.53277C10.0796 9.81088 9.93031 10.1871 9.92707 10.5804C9.92384 10.9737 10.0669 11.3526 10.3254 11.6355L11.3289 12.696ZM13.3358 25.425L12.3323 26.4855C12.0647 26.7587 11.7061 26.9099 11.334 26.9065C10.9619 26.9031 10.6059 26.7453 10.3427 26.4672C10.0796 26.1891 9.93031 25.8129 9.92707 25.4196C9.92384 25.0263 10.0669 24.6474 10.3254 24.3645L11.3289 23.304C11.5966 23.0308 11.9551 22.8796 12.3272 22.883C12.6994 22.8864 13.0553 23.0442 13.3185 23.3223C13.5816 23.6004 13.7309 23.9766 13.7341 24.3699C13.7374 24.7632 13.5943 25.1421 13.3358 25.425ZM9.83861 19.5C10.215 19.5 10.576 19.342 10.8422 19.0607C11.1084 18.7794 11.2579 18.3978 11.2579 18C11.2579 17.6022 11.1084 17.2206 10.8422 16.9393C10.576 16.658 10.215 16.5 9.83861 16.5H8.41931C8.04288 16.5 7.68188 16.658 7.41571 16.9393C7.14953 17.2206 7 17.6022 7 18C7 18.3978 7.14953 18.7794 7.41571 19.0607C7.68188 19.342 8.04288 19.5 8.41931 19.5H9.83861Z"
          fill={borderColor}
        />
      </g>
    </g>
  );
};

export default function MyResponsiveLine({ data }) {
  const max = data[0].data.reduce(function (prev, current) {
    return prev.y > current.y ? prev : current;
  });

  const min = data[0].data.reduce(function (prev, current) {
    return prev.y < current.y ? prev : current;
  });

  return (
    <ResponsiveLine
      data={data}
      theme={testTheme}
      margin={{ top: 50, right: 50, bottom: 50, left: 50 }}
      xScale={{
        type: "time",
        format: "%Y-%m-%d",
        precision: "day",
        min: "2021-01-01",
        max: "2021-01-31",
      }}
      xFormat="time:%Y-%m-%d"
      yScale={{
        type: "linear",
        min: min.y - 20,
        max: max.y + 20,
        stacked: false,
        reverse: false,
      }}
      colors={{ datum: "color" }}
      yFormat=" >-.2f"
      curve="basis"
      axisTop={null}
      axisRight={null}
      axisBottom={{
        format: "%d",
        tickValues: "every 2 days",
        legend: "date",
        legendOffset: -12,
      }}
      axisLeft={{
        orient: "left",
        tickSize: 5,
        tickPadding: 5,
        tickRotation: 0,
        legend: "height",
        legendOffset: -40,
      }}
      lineWidth={7}
      pointSymbol={CustomPoint}
      pointSize={26}
      pointColor={"hsla(0, 0%, 80%,0.9)"}
      pointBorderWidth={2}
      pointBorderColor={"hsla(0, 0%, 20%, 1)"}
      enableGridX={false}
      enableGridY={false}
      enableArea={true}
      areaBaselineValue={0}
      areaOpacity={0}
      useMesh={true}
      tooltip={({ point }) => {
        return (
          <Box
            background="#f2f2f2"
            padding="9px 12px"
            border="1px solid #ccc"
            color="#333333"
            left="100px"
            top="200px"
            height="fit-content"
            width="200px"
            transform="translate(120px,50px)"
            borderRadius="22px"
          >
            <Flex justifyContent="space-between">
              <Text fontWeight="bold">
                {point.data.yFormatted.slice(0, -3)}cm
              </Text>
              <Text>{point.data.xFormatted}</Text>
            </Flex>
            <Text noOfLines={4} isTruncated>
              {point.data.another}
            </Text>
          </Box>
        );
      }}
    />
  );
}
